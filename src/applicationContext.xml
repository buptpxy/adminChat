<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:jms="http://www.springframework.org/schema/jms" xmlns:lang="http://www.springframework.org/schema/lang"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:oxm="http://www.springframework.org/schema/oxm"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd  
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd  
        http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-3.1.xsd  
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd  
        http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd  
        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.1.xsd  
        http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms-3.1.xsd  
        http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-3.1.xsd  
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd  
        http://www.springframework.org/schema/oxm http://www.springframework.org/schema/oxm/spring-oxm-3.1.xsd  
        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.1.xsd  
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd  
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd">

	<context:component-scan base-package="com.pxy.*" />
	<mvc:annotation-driven />
	<bean id="DataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url"
			value="jdbc:mysql://localhost:3306/pxy?useUnicode=true&amp;characterEncoding=utf8" />
		<property name="username" value="admin" />
		<property name="password" value="123456" />
		<!-- 最大连接数据库连接数 -->
		<property name="maxActive" value="500" />
		<!-- 最大等待连接中的数量 0标识没有限制 -->
		<property name="maxIdle" value="10" />
		<!-- 最大等待毫秒数 超时报错 -->
		<property name="maxWait" value="500" />
		<property name="defaultAutoCommit" value="true" />
		<!-- 是否自我中断 -->
		<property name="removeAbandoned" value="true" />
		<property name="removeAbandonedTimeout" value="60" />
	</bean>
	<!-- 2,配置SqlSessionFactoryBean -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 指明mybatis主配置文件路径 -->
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<!-- 指明数据源 -->
		<property name="dataSource" ref="DataSource" />
		<!-- 为包中的类(即实体类)注册别名 -->
		<property name="typeAliasesPackage" value="com.pxy.entity" />
	</bean>

	<!-- 3,配置MapperFactoryBean -->
	<!-- 1)手动配置 -->
	<!-- <bean id="leagueMapper" class="org.mybatis.spring.mapper.MapperFactoryBean"> 
		<property name="mapperInterface" value="com.oracle.springmvc.dao.LeagueMapper" 
		/> <property name="sqlSessionFactory" ref="sqlSessionFactory"/> </bean> -->
	<!-- 2)扫描配置 -->
	<bean id="mapperScanner" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.pxy.dao" />
	</bean>


	<!-- 返回json时 中文乱码 不确定是否有用！~ -->
	<mvc:annotation-driven>
		<mvc:message-converters>
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
				<property name="supportedMediaTypes">
					<list>
						<value>application/json;charset=UTF-8</value>
					</list>
				</property>
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>

	<!-- 注入数据库连接 -->
	<!-- <bean id="weshareSqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate"> 
		<constructor-arg index="0" ref="SessionFactory"></constructor-arg> </bean> -->

	<!-- 注册单个 mybatisGenerator 自动生成的 接口文件 -->
	<!-- 扫描mybatisGenerator 自动生成的 所有接口 <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"> 
		<property name="basePackage" value="com.weke.dao"></property> </bean> -->
	<!-- 注入数据库连接 -->
	<bean id="defaultBaseDao" class="com.pxy.util.DefaultBaseDaoImpl">
		<constructor-arg index="0" ref="sqlSessionFactory"></constructor-arg>
	</bean>


	<!-- 数据库事务策略 -->
	<bean id="weshareTransactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource">
			<ref bean="DataSource" />
		</property>
	</bean>


	<tx:advice id="weshareTxAdvice" transaction-manager="weshareTransactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="ins*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="query*" read-only="true" />
			<tx:method name="get*" read-only="true" />
			<tx:method name="select*" read-only="true" />
			<tx:method name="login*" read-only="true" />
			<tx:method name="get*" read-only="true" />
			<tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>

	<!-- proxy-target-class=false,表示biz层可以不用编写接口，但是我们需要引入一个jar文件：cglib-nodep-2.1_3.jar 
		这个jar文件就是用于在实现动态代理的时候，不用基于接口。。 在动态代理的设计模式中，必须是基于接口的，除非使用了：cglib -->
	<aop:config proxy-target-class="true">
		<aop:advisor pointcut="execution(* com.pxy.service.imp..*.*(..))"
			advice-ref="weshareTxAdvice" />
	</aop:config>

	<!-- 任务扫描注解，主要是定时器的扫描 -->
	<task:executor id="executor" pool-size="5" />
	<task:scheduler id="scheduler" pool-size="10" />
	<task:annotation-driven executor="executor"
		scheduler="scheduler" />
</beans>

